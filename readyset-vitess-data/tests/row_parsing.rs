use std::sync::Arc;

use readyset_data::DfValue;
use readyset_vitess_data::row_parsing::vstream_row_to_noria_row;
use vitess_grpc::binlogdata::FieldEvent;
use vitess_grpc::query::{Field, Row, Type};

#[test]
fn basics() {
    let keyspace = "commerce".to_string();
    let table = "product".to_string();
    let full_table_name = format!("{}.{}", keyspace, table);
    let db_name = "vt_commerce_0".to_string();

    let field = FieldEvent {
        table_name: full_table_name.clone(),
        fields: vec![
            Field {
                name: "sku".to_string(),
                r#type: Type::Varchar as i32,
                table: table.clone(),
                org_table: table.clone(),
                database: db_name.clone(),
                org_name: "sku".to_string(),
                column_length: 400,
                charset: 255,
                decimals: 0,
                flags: 20483,
                column_type: "varchar(100)".to_string(),
            },
            Field {
                name: "description".to_string(),
                r#type: Type::Varbinary as i32,
                table: table.clone(),
                org_table: table.clone(),
                database: db_name.clone(),
                org_name: "description".to_string(),
                column_length: 128,
                charset: 63,
                decimals: 0,
                flags: 128,
                column_type: "varbinary(128)".to_string(),
            },
            Field {
                name: "price".to_string(),
                r#type: Type::Int64 as i32,
                table: table.clone(),
                org_table: table.clone(),
                database: db_name.clone(),
                org_name: "price".to_string(),
                column_length: 20,
                charset: 63,
                decimals: 0,
                flags: 32768,
                column_type: "bigint".to_string(),
            },
        ],
        keyspace,
        shard: "0".to_string(),
    };

    let insert_row = Row {
        lengths: vec![2, 10, 2],
        values: vec![
            112, 49, // p1
            112, 114, 111, 100, 117, 99, 116, 32, 35, 49, // product #1
            52, 50, // 42
        ],
    };

    let res = vstream_row_to_noria_row(&insert_row, &field);
    assert!(res.is_ok());
    assert_eq!(
        res.unwrap(),
        vec![
            DfValue::Text("p1".into()),
            DfValue::ByteArray(Arc::new(vec![112, 114, 111, 100, 117, 99, 116, 32, 35, 49])),
            DfValue::Int(42),
        ]
    );
}

#[test]
fn comprehensive() {
    let keyspace = "commerce".to_string();
    let table = "test_all_types".to_string();
    let full_table_name = format!("{}.{}", keyspace, table);
    let db_name = "vt_commerce_0".to_string();

    let field = FieldEvent {
        table_name: full_table_name.clone(),
        fields: vec![
            Field {
                name: "id".to_string(),
                r#type: Type::Int32 as i32,
                table: table.clone(),
                org_table: table.clone(),
                database: db_name.clone(),
                org_name: "id".to_string(),
                column_length: 11,
                charset: 63,
                decimals: 0,
                flags: 49667,
                column_type: "int".to_string(),
            },
            Field {
                name: "col_tinyint".to_string(),
                r#type: Type::Int8 as i32,
                table: table.clone(),
                org_table: table.clone(),
                database: db_name.clone(),
                org_name: "col_tinyint".to_string(),
                column_length: 4,
                charset: 63,
                decimals: 0,
                flags: 32768,
                column_type: "tinyint".to_string(),
            },
            Field {
                name: "col_smallint".to_string(),
                r#type: Type::Int16 as i32,
                table: table.clone(),
                org_table: table.clone(),
                database: db_name.clone(),
                org_name: "col_smallint".to_string(),
                column_length: 6,
                charset: 63,
                decimals: 0,
                flags: 32768,
                column_type: "smallint".to_string(),
            },
            Field {
                name: "col_mediumint".to_string(),
                r#type: Type::Int24 as i32,
                table: table.clone(),
                org_table: table.clone(),
                database: db_name.clone(),
                org_name: "col_mediumint".to_string(),
                column_length: 9,
                charset: 63,
                decimals: 0,
                flags: 32768,
                column_type: "mediumint".to_string(),
            },
            Field {
                name: "col_int".to_string(),
                r#type: Type::Int32 as i32,
                table: table.clone(),
                org_table: table.clone(),
                database: db_name.clone(),
                org_name: "col_int".to_string(),
                column_length: 11,
                charset: 63,
                decimals: 0,
                flags: 32768,
                column_type: "int".to_string(),
            },
            Field {
                name: "col_bigint".to_string(),
                r#type: Type::Int64 as i32,
                table: table.clone(),
                org_table: table.clone(),
                database: db_name.clone(),
                org_name: "col_bigint".to_string(),
                column_length: 20,
                charset: 63,
                decimals: 0,
                flags: 32768,
                column_type: "bigint".to_string(),
            },
            Field {
                name: "col_float".to_string(),
                r#type: Type::Float32 as i32,
                table: table.clone(),
                org_table: table.clone(),
                database: db_name.clone(),
                org_name: "col_float".to_string(),
                column_length: 12,
                charset: 63,
                decimals: 31,
                flags: 32768,
                column_type: "float".to_string(),
            },
            Field {
                name: "col_double".to_string(),
                r#type: Type::Float64 as i32,
                table: table.clone(),
                org_table: table.clone(),
                database: db_name.clone(),
                org_name: "col_double".to_string(),
                column_length: 22,
                charset: 63,
                decimals: 31,
                flags: 32768,
                column_type: "double".to_string(),
            },
            Field {
                name: "col_decimal".to_string(),
                r#type: Type::Decimal as i32,
                table: table.clone(),
                org_table: table.clone(),
                database: db_name.clone(),
                org_name: "col_decimal".to_string(),
                column_length: 12,
                charset: 63,
                decimals: 2,
                flags: 32768,
                column_type: "decimal(10,2)".to_string(),
            },
            Field {
                name: "col_bit".to_string(),
                r#type: Type::Bit as i32,
                table: table.clone(),
                org_table: table.clone(),
                database: db_name.clone(),
                org_name: "col_bit".to_string(),
                column_length: 8,
                charset: 63,
                decimals: 0,
                flags: 32,
                column_type: "bit(8)".to_string(),
            },
            Field {
                name: "col_date".to_string(),
                r#type: Type::Date as i32,
                table: table.clone(),
                org_table: table.clone(),
                database: db_name.clone(),
                org_name: "col_date".to_string(),
                column_length: 10,
                charset: 63,
                decimals: 0,
                flags: 128,
                column_type: "date".to_string(),
            },
            Field {
                name: "col_time".to_string(),
                r#type: Type::Time as i32,
                table: table.clone(),
                org_table: table.clone(),
                database: db_name.clone(),
                org_name: "col_time".to_string(),
                column_length: 10,
                charset: 63,
                decimals: 0,
                flags: 128,
                column_type: "time".to_string(),
            },
            Field {
                name: "col_datetime".to_string(),
                r#type: Type::Datetime as i32,
                table: table.clone(),
                org_table: table.clone(),
                database: db_name.clone(),
                org_name: "col_datetime".to_string(),
                column_length: 19,
                charset: 63,
                decimals: 0,
                flags: 128,
                column_type: "datetime".to_string(),
            },
            Field {
                name: "col_timestamp".to_string(),
                r#type: Type::Timestamp as i32,
                table: table.clone(),
                org_table: table.clone(),
                database: db_name.clone(),
                org_name: "col_timestamp".to_string(),
                column_length: 19,
                charset: 63,
                decimals: 0,
                flags: 9344,
                column_type: "timestamp".to_string(),
            },
            Field {
                name: "col_year".to_string(),
                r#type: Type::Year as i32,
                table: table.clone(),
                org_table: table.clone(),
                database: db_name.clone(),
                org_name: "col_year".to_string(),
                column_length: 4,
                charset: 63,
                decimals: 0,
                flags: 32864,
                column_type: "year".to_string(),
            },
            Field {
                name: "col_char".to_string(),
                r#type: Type::Char as i32,
                table: table.clone(),
                org_table: table.clone(),
                database: db_name.clone(),
                org_name: "col_char".to_string(),
                column_length: 40,
                charset: 255,
                decimals: 0,
                flags: 0,
                column_type: "char(10)".to_string(),
            },
            Field {
                name: "col_varchar".to_string(),
                r#type: Type::Varchar as i32,
                table: table.clone(),
                org_table: table.clone(),
                database: db_name.clone(),
                org_name: "col_varchar".to_string(),
                column_length: 400,
                charset: 255,
                decimals: 0,
                flags: 0,
                column_type: "varchar(100)".to_string(),
            },
            Field {
                name: "col_binary".to_string(),
                r#type: Type::Binary as i32,
                table: table.clone(),
                org_table: table.clone(),
                database: db_name.clone(),
                org_name: "col_binary".to_string(),
                column_length: 10,
                charset: 63,
                decimals: 0,
                flags: 128,
                column_type: "binary(10)".to_string(),
            },
            Field {
                name: "col_varbinary".to_string(),
                r#type: Type::Varbinary as i32,
                table: table.clone(),
                org_table: table.clone(),
                database: db_name.clone(),
                org_name: "col_varbinary".to_string(),
                column_length: 100,
                charset: 63,
                decimals: 0,
                flags: 128,
                column_type: "varbinary(100)".to_string(),
            },
            Field {
                name: "col_tinytext".to_string(),
                r#type: Type::Text as i32,
                table: table.clone(),
                org_table: table.clone(),
                database: db_name.clone(),
                org_name: "col_tinytext".to_string(),
                column_length: 1020,
                charset: 255,
                decimals: 0,
                flags: 16,
                column_type: "tinytext".to_string(),
            },
            Field {
                name: "col_text".to_string(),
                r#type: Type::Text as i32,
                table: table.clone(),
                org_table: table.clone(),
                database: db_name.clone(),
                org_name: "col_text".to_string(),
                column_length: 262140,
                charset: 255,
                decimals: 0,
                flags: 16,
                column_type: "text".to_string(),
            },
            Field {
                name: "col_mediumtext".to_string(),
                r#type: Type::Text as i32,
                table: table.clone(),
                org_table: table.clone(),
                database: db_name.clone(),
                org_name: "col_mediumtext".to_string(),
                column_length: 67108860,
                charset: 255,
                decimals: 0,
                flags: 16,
                column_type: "mediumtext".to_string(),
            },
            Field {
                name: "col_longtext".to_string(),
                r#type: Type::Text as i32,
                table: table.clone(),
                org_table: table.clone(),
                database: db_name.clone(),
                org_name: "col_longtext".to_string(),
                column_length: 4294967295,
                charset: 255,
                decimals: 0,
                flags: 16,
                column_type: "longtext".to_string(),
            },
            Field {
                name: "col_tinyblob".to_string(),
                r#type: Type::Blob as i32,
                table: table.clone(),
                org_table: table.clone(),
                database: db_name.clone(),
                org_name: "col_tinyblob".to_string(),
                column_length: 255,
                charset: 63,
                decimals: 0,
                flags: 144,
                column_type: "tinyblob".to_string(),
            },
            Field {
                name: "col_blob".to_string(),
                r#type: Type::Blob as i32,
                table: table.clone(),
                org_table: table.clone(),
                database: db_name.clone(),
                org_name: "col_blob".to_string(),
                column_length: 65535,
                charset: 63,
                decimals: 0,
                flags: 144,
                column_type: "blob".to_string(),
            },
            Field {
                name: "col_mediumblob".to_string(),
                r#type: Type::Blob as i32,
                table: table.clone(),
                org_table: table.clone(),
                database: db_name.clone(),
                org_name: "col_mediumblob".to_string(),
                column_length: 16777215,
                charset: 63,
                decimals: 0,
                flags: 144,
                column_type: "mediumblob".to_string(),
            },
            Field {
                name: "col_longblob".to_string(),
                r#type: Type::Blob as i32,
                table: table.clone(),
                org_table: table.clone(),
                database: db_name.clone(),
                org_name: "col_longblob".to_string(),
                column_length: 4294967295,
                charset: 63,
                decimals: 0,
                flags: 144,
                column_type: "longblob".to_string(),
            },
            Field {
                name: "col_enum".to_string(),
                r#type: Type::Enum as i32,
                table: table.clone(),
                org_table: table.clone(),
                database: db_name.clone(),
                org_name: "col_enum".to_string(),
                column_length: 4,
                charset: 255,
                decimals: 0,
                flags: 256,
                column_type: "enum('A','B','C')".to_string(),
            },
            Field {
                name: "col_set".to_string(),
                r#type: Type::Set as i32,
                table: table.clone(),
                org_table: table.clone(),
                database: db_name.clone(),
                org_name: "col_set".to_string(),
                column_length: 20,
                charset: 255,
                decimals: 0,
                flags: 2048,
                column_type: "set('X','Y','Z')".to_string(),
            },
            Field {
                name: "col_geometry".to_string(),
                r#type: Type::Geometry as i32,
                table: table.clone(),
                org_table: table.clone(),
                database: db_name.clone(),
                org_name: "col_geometry".to_string(),
                column_length: 4294967295,
                charset: 63,
                decimals: 0,
                flags: 144,
                column_type: "geometry".to_string(),
            },
            Field {
                name: "col_point".to_string(),
                r#type: Type::Geometry as i32,
                table: table.clone(),
                org_table: table.clone(),
                database: db_name.clone(),
                org_name: "col_point".to_string(),
                column_length: 4294967295,
                charset: 63,
                decimals: 0,
                flags: 144,
                column_type: "point".to_string(),
            },
            Field {
                name: "col_linestring".to_string(),
                r#type: Type::Geometry as i32,
                table: table.clone(),
                org_table: table.clone(),
                database: db_name.clone(),
                org_name: "col_linestring".to_string(),
                column_length: 4294967295,
                charset: 63,
                decimals: 0,
                flags: 144,
                column_type: "linestring".to_string(),
            },
            Field {
                name: "col_polygon".to_string(),
                r#type: Type::Geometry as i32,
                table: table.clone(),
                org_table: table.clone(),
                database: db_name.clone(),
                org_name: "col_polygon".to_string(),
                column_length: 4294967295,
                charset: 63,
                decimals: 0,
                flags: 144,
                column_type: "polygon".to_string(),
            },
            Field {
                name: "col_multipoint".to_string(),
                r#type: Type::Geometry as i32,
                table: table.clone(),
                org_table: table.clone(),
                database: db_name.clone(),
                org_name: "col_multipoint".to_string(),
                column_length: 4294967295,
                charset: 63,
                decimals: 0,
                flags: 144,
                column_type: "multipoint".to_string(),
            },
            Field {
                name: "col_multilinestring".to_string(),
                r#type: Type::Geometry as i32,
                table: table.clone(),
                org_table: table.clone(),
                database: db_name.clone(),
                org_name: "col_multilinestring".to_string(),
                column_length: 4294967295,
                charset: 63,
                decimals: 0,
                flags: 144,
                column_type: "multilinestring".to_string(),
            },
            Field {
                name: "col_multipolygon".to_string(),
                r#type: Type::Geometry as i32,
                table: table.clone(),
                org_table: table.clone(),
                database: db_name.clone(),
                org_name: "col_multipolygon".to_string(),
                column_length: 4294967295,
                charset: 63,
                decimals: 0,
                flags: 144,
                column_type: "multipolygon".to_string(),
            },
            Field {
                name: "col_geometrycollection".to_string(),
                r#type: Type::Geometry as i32,
                table: table.clone(),
                org_table: table.clone(),
                database: db_name.clone(),
                org_name: "col_geometrycollection".to_string(),
                column_length: 4294967295,
                charset: 63,
                decimals: 0,
                flags: 144,
                column_type: "geomcollection".to_string(),
            },
            Field {
                name: "col_json".to_string(),
                r#type: Type::Json as i32,
                table: table.clone(),
                org_table: table.clone(),
                database: db_name.clone(),
                org_name: "col_json".to_string(),
                column_length: 4294967295,
                charset: 63,
                decimals: 0,
                flags: 144,
                column_type: "json".to_string(),
            },
        ],
        keyspace: "commerce".to_string(),
        shard: "0".to_string(),
    };

    let insert_row = Row {
        lengths: vec![
            1, 1, 3, 5, 7, 12, 10, 14, 8, 1, 10, 8, 19, 19, 4, 7, 15, 10, 4, 9, 29, 22, 50, 1, 4,
            6, 9, 1, 1, 25, 25, 45, 97, 55, 95, 199, 75, 15,
        ],
        values: vec![
            49, 49, 49, 50, 51, 49, 50, 51, 52, 53, 49, 50, 51, 52, 53, 54, 55, 49, 50, 51, 52, 53,
            54, 55, 56, 57, 48, 49, 50, 49, 46, 50, 51, 52, 53, 69, 43, 48, 50, 49, 46, 50, 51, 52,
            53, 54, 55, 56, 57, 69, 43, 48, 52, 49, 50, 51, 52, 53, 46, 54, 55, 170, 50, 48, 50,
            51, 45, 48, 55, 45, 50, 53, 49, 53, 58, 51, 48, 58, 52, 53, 50, 48, 50, 51, 45, 48, 55,
            45, 50, 53, 32, 49, 53, 58, 51, 48, 58, 52, 53, 50, 48, 50, 51, 45, 48, 55, 45, 50, 53,
            32, 49, 53, 58, 51, 48, 58, 52, 53, 50, 48, 50, 51, 67, 72, 65, 82, 86, 65, 76, 84,
            104, 105, 115, 32, 105, 115, 32, 86, 65, 82, 67, 72, 65, 82, 170, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 10, 11, 12, 13, 84, 105, 110, 121, 32, 116, 101, 120, 116, 84, 104, 105, 115, 32,
            105, 115, 32, 97, 32, 114, 101, 103, 117, 108, 97, 114, 32, 116, 101, 120, 116, 32,
            102, 105, 101, 108, 100, 46, 84, 104, 105, 115, 32, 105, 115, 32, 97, 32, 109, 101,
            100, 105, 117, 109, 32, 116, 101, 120, 116, 46, 84, 104, 105, 115, 32, 105, 115, 32,
            97, 32, 108, 111, 110, 103, 32, 116, 101, 120, 116, 44, 32, 116, 104, 111, 117, 103,
            104, 32, 116, 104, 105, 115, 32, 101, 120, 97, 109, 112, 108, 101, 32, 105, 115, 32,
            115, 104, 111, 114, 116, 46, 10, 10, 11, 12, 13, 10, 11, 12, 13, 14, 15, 10, 11, 12,
            13, 14, 15, 16, 17, 18, 49, 51, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36, 64, 0,
            0, 0, 0, 0, 0, 36, 64, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36, 64, 0, 0, 0, 0,
            0, 0, 36, 64, 0, 0, 0, 0, 1, 2, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36, 64, 0, 0, 0, 0, 0, 0, 36, 64, 0, 0, 0, 0, 1, 3, 0,
            0, 0, 1, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 36, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36, 64, 0, 0, 0, 0, 0, 0,
            36, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 4, 0, 0, 0, 2, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36, 64, 0, 0, 0, 0,
            0, 0, 36, 64, 0, 0, 0, 0, 1, 5, 0, 0, 0, 2, 0, 0, 0, 1, 2, 0, 0, 0, 2, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36, 64, 0, 0, 0, 0, 0, 0,
            36, 64, 1, 2, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36, 64, 0, 0, 0, 0, 0, 0, 36, 64,
            0, 0, 0, 0, 0, 0, 52, 64, 0, 0, 0, 0, 0, 0, 52, 64, 0, 0, 0, 0, 1, 6, 0, 0, 0, 2, 0, 0,
            0, 1, 3, 0, 0, 0, 1, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 36, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36, 64, 0, 0, 0,
            0, 0, 0, 36, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36, 64, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 0, 0, 0, 1, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 36, 192, 0, 0, 0, 0, 0, 0, 36, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            36, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 7, 0, 0, 0, 2,
            0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36, 64, 0, 0, 0, 0, 0, 0, 36, 64, 1, 2, 0, 0,
            0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36,
            64, 0, 0, 0, 0, 0, 0, 36, 64, 123, 34, 107, 101, 121, 34, 58, 34, 118, 97, 108, 117,
            101, 34, 125,
        ],
    };

    let res = vstream_row_to_noria_row(&insert_row, &field);
    println!("{:?}", res.unwrap());
}
